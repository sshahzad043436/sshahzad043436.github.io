median_ibu="Median International Bitterness"))) +
theme(legend.position = "none", axis.text.x = element_text(size=8))
q4 %>%
filter(median_abv == max(median_abv, na.rm = T)) %>%
select(-median_ibu) %>%
kable(format="html", align="lc", digits=2,
col.names=c("State", "Median ABV")) %>%
kable_styling(full_width = F)
q4 %>%
filter(median_ibu == max(median_ibu, na.rm = T))  %>%
select(-median_abv) %>%
kable(format="html", align="lc", digits=2,
col.names=c("State", "Median IBU")) %>%
kable_styling(full_width = F)
tibble(
Stats = summary(q2$ABV) %>% names(),
Values = summary(q2$ABV) %>% as.vector()
) %>%
kable(format="html", align="lc", digits=3) %>%
kable_styling(full_width = F)
q2 %>%
ggplot(aes(ABV, ..density..)) +
geom_histogram(fill="white", color="darkred", bins = 25) +
geom_density(color="navy", size=0.5, kernel = "epanechnikov")
formula <- as.formula(y ~ x)
q2 %>%
ggplot(aes(IBU, ABV)) +
geom_point(color="blue", alpha=0.3) +
geom_smooth(formula = formula, method = "lm", color="darkred") +
stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
formula = formula, parse = TRUE, na.rm = T)
lm(ABV ~ IBU, data = q2) %>% summary() %$%
coefficients %>%
kable(format="html", align="lc", digits=4, row.names=T) %>%
kable_styling(full_width = F)
q8 =
q2 %>%
mutate(
beer_type =
ifelse(
str_to_lower(Beers) %>% str_detect("ipa"), "IPAs",
ifelse(
str_to_lower(Beers) %>% str_detect("ale"), "Ale", NA
)
) %>%
as.factor()
)
q8 %>%
dplyr::count(beer_type) %>%
na.omit() %>%
mutate(Pct = 100*n/sum(n)) %>%
rename(Count = n, `Beer Type`=beer_type, Percent=Pct) %>%
arrange(Count) %>%
kable(format="html", align="lcc", digits=2, row.names=F) %>%
kable_styling(full_width = F)
q8_v2 =
q8 %>%
select(beer_type, ABV, IBU) %>%
na.omit() #knn function does not accept missing values
#Select train and test datasets
r = nrow(q8_v2)
p = 0.8
n = as.integer(p*r)
set.seed(198)
iterations = 100
ks = 25
accuracies = matrix(nrow = iterations, ncol = ks)
set.seed(189)
myseeds = runif(iterations) %>% multiply_by(1000) %>% round()
for(j in 1:iterations)
{
set.seed(myseeds[j])
index = sample(1:r, n, replace = F)
test.data = q8_v2[index,]
train.data = q8_v2[-index,]
for(i in 1:ks)
{
knn(
train = train.data %>% select(ABV, IBU),
test = test.data %>% select(ABV, IBU),
cl = train.data %$% beer_type,
k = i, prob = F
) -> knn_v0
confMat = confusionMatrix(table(knn_v0, test.data$beer_type))
accuracies[j,i] = confMat$overall[1]
}
#cat(j, "\n")
}
plot(1:ks, colMeans(accuracies), type = "b", lwd=1, pch=19, col="navy",
xlab = "Number of neighbours", ylab = "Accuracy")
abline(v = 13, col="red")
abline(h = colMeans(accuracies)[13], col="red")
avg_acc = colMeans(accuracies)[13]
q8_v3 =
q8_v2 %>%
mutate(
ABV = log(ABV+1) %>% scale() %>% as.numeric(),
IBU = log(IBU) %>% scale() %>% as.numeric()
)
#Select train and test datasets
r = nrow(q8_v3)
p = 0.8
n = as.integer(p*r)
set.seed(198)
iterations = 100
accuracies = matrix(nrow = iterations, ncol = ks)
ks = 25
set.seed(189)
myseeds = runif(iterations) %>% multiply_by(1000) %>% round()
for(j in 1:iterations)
{
set.seed(myseeds[j])
index = sample(1:r, n, replace = F)
test.data = q8_v3[index,]
train.data = q8_v3[-index,]
for(i in 1:ks)
{
knn(
train = train.data %>% select(ABV, IBU),
test = test.data %>% select(ABV, IBU),
cl = train.data %$% beer_type,
k = i, prob = F
) -> knn_v0
confMat = confusionMatrix(table(knn_v0, test.data$beer_type))
accuracies[j,i] = confMat$overall[1]
}
#cat(j, "\n")
}
plot(1:ks, colMeans(accuracies), type = "b", lwd=1, pch=19, col="navy",
xlab = "Number of neighbours", ylab = "Accuracy")
abline(v = 5, col="red")
abline(h = colMeans(accuracies)[5], col="red")
avg_acc = colMeans(accuracies)[5]
q8_v2 =
q8 %>%
select(beer_type, ABV, IBU) %>%
na.omit()
#Select train and test datasets
r = nrow(q8_v2)
p = 0.8
n = as.integer(p*r)
iterations = 100
accuracies = numeric(iterations)
set.seed(189)
myseeds = runif(iterations) %>% multiply_by(1000) %>% round()
for(i in 1:iterations)
{
set.seed(myseeds[i])
index = sample(1:r, n, replace = F)
test.data = q8_v2[index,]
train.data = q8_v2[-index,]
glm(
formula = beer_type ~ ABV + IBU,
data = q8_v2,
family = binomial("logit") # logit, probit, cauchit
) -> glm_v0
predicted =
predict.glm(glm_v0, newdata = test.data, type = "response") %>%
as.numeric() %>%
is_weakly_greater_than(0.5) %>%
ifelse("IPAs", "Ale") %>%
as.factor()
confMat = confusionMatrix(table(predicted, test.data$beer_type))
accuracies[i] = confMat$overall[1]
}
avg_acc = mean(accuracies)
us_region =
tibble(
State = str_to_upper(state.abb),
Region = str_to_title(state.region)
)
q9 =
left_join(q8, us_region, by="State") %>%
select(beer_type, ABV, IBU, Ounces, Region) %>%
na.omit()
#t.test(Ounces ~ beer_type, data = q9, paired=F)
wilcox.test(Ounces ~ beer_type, data = q9, paired=F)
count(q9, beer_type, Region) %>%
group_by(beer_type) %>%
mutate(Pct = 100*n/sum(n)) %>%
rename(Count = n) %>%
arrange(beer_type, Region) %>%
kable(format = "html", align = "llcc", digits = 2,
col.names = c("Beer Type", "Region", "Count", "Percent")) %>%
kable_styling(full_width = F) %>%
collapse_rows(1)
q9 %$% fisher.test(beer_type, Region)
q9_v2 =
q9 %>%
select(beer_type, ABV, IBU, Region) %>%
na.omit()
#Select train and test datasets
r = nrow(q9_v2)
p = 0.8
n = as.integer(p*r)
iterations = 100
accuracies = numeric(iterations)
set.seed(189)
myseeds = runif(iterations) %>% multiply_by(1000) %>% round()
for(i in 1:iterations)
{
set.seed(myseeds[i])
index = sample(1:r, n, replace = F)
test.data = q9_v2[index,]
train.data = q9_v2[-index,]
glm(
formula = beer_type ~ ABV + IBU + Region,
data = q9_v2,
family = binomial("logit") # logit, probit, cauchit
) -> glm_v0
predicted =
predict.glm(glm_v0, newdata = test.data, type = "response") %>%
as.numeric() %>%
is_weakly_greater_than(0.5) %>%
ifelse("IPAs", "Ale") %>%
as.factor()
confMat = confusionMatrix(table(predicted, test.data$beer_type))
accuracies[i] = confMat$overall[1]
}
avg_acc = mean(accuracies)
baseball_data <- read.csv("~/Desktop/newSMU/6371/baseball_data.csv")
View(baseball_data)
baseball <- read.csv("~/Desktop/newSMU/6371/baseball_data.csv")
View(baseball_data)
baseball <- read.csv("~/Desktop/newSMU/6371/baseball_data.csv")
View(baseball_data)
qt(0.975, 30-2)
2*pt(2.08, 30-2. lower.tail=F)
baseball <- read.csv("~/Desktop/newSMU/6371/baseball_data.csv")
test_data = read_csv("~/Desktop/newSMU/6371/TEST DATA.csv")
test_data = read_csv("~/Desktop/newSMU/6371/TEST\ DATA.csv")
TEST.DATA <- read.csv("~/Desktop/newSMU/6371/TEST DATA.csv")
View(TEST.DATA)
test_data <-  read_csv("~/Desktop/newSMU/6371/TEST DATA.csv")
test_data <-  read.csv("~/Desktop/newSMU/6371/TEST DATA.csv")
View(test_data)
test_data <-  read.csv("~/Desktop/newSMU/6371/TEST DATA.csv")
source('~/Downloads/solution HW9.R', echo=TRUE)
n = 30
n = 30
n = 30
df = n - 2
alpha = 0.05
# t-critical value
tc = qt(1-alpha/2, df)
tc
#p-value
t_obs = 2.08
pvalue = 2*pt(t_obs, df, lower.tail=F)
pvalue
#======================
# Part D
#======================
#install.packages("tidyverse")
library(tidyverse)
#install.packages("broom")
library(broom)
baseball <- read.csv("~/Desktop/newSMU/6371/baseball_data.csv")
model = lm(Wins  ~ Payroll, data = baseball)
tidy(model, conf.int = TRUE, conf.level = 0.95)
#*********************************
# Question 2
#*********************************
#======================
# Part A
#======================
test_data <-  read.csv("~/Desktop/newSMU/6371/TEST DATA.csv")
View(test_data)
model_math = lm(math ~ science, data=test_data)
tidy(model_math)
#======================
# Part B
#======================
# slope test (i.e. science test)
n = nrow(test_data)
df = n - 2
alpha = 0.01
# t-critical value
tc = qt(1-alpha/2, df)
tc
tobs = 11.437
pvalue = 2*pt(tobs, df, lower.tail=F)
pvalue
# Intercept test
n = nrow(test_data)
df = n - 2
alpha = 0.01
# t-critical value
tc = qt(1-alpha/2, df)
tc
tobs = 7.879
pvalue = 2*pt(tobs, df, lower.tail=F)
pvalue
#======================
# Part D
#======================
confint(model_math, level = 0.95)
#**********************
# BONUS
#**********************
baseball <- read.csv("~/Desktop/newSMU/6371/baseball_data.csv")
model_baseball = lm(Wins ~ Payroll, data = baseball)
# question a)
newdata = data.frame(Payroll = 100)
predict.lm(model_baseball, newdata, interval = "confidence")
# question b)
predict.lm(model, newdata, interval = "prediction")
link = "https://github.com/BivinSadler/MDS-6306-Doing-Data-Science-Fall-2019/blob/master/Unit%2010/cars.csv"
read.csv = (link)
link = "https://github.com/BivinSadler/MDS-6306-Doing-Data-Science-Fall-2019/blob/master/Unit%2010/cars.csv"
read.csv = (link)
View(link)
install.packages(rsconnect)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='saqibdds', token='72BFC91AA5007804E3393F2842060120', secret='mto8pGPqbUHDGdEu62Ej3U0ga9BPF7XQNbHVuN+D')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp("~/Desktop/Unit 12")
library(rsconnect)
rsconnect::deployApp("~/Desktop/Unit 12")
library(rsconnect)
rsconnect::deployApp("~/Desktop/Unit 12/ui.R")
rsconnect::deployApp("~/Desktop/Unit 12/ui")
shiny::runApp('Desktop/Unit 12')
getwd()
getwd()
pacman::p_load(shiny, magrittr, readxl, tidyverse, ggpmisc, patchwork)
if(!require("pacman", quietly = T)) install.packages("pacman")
pacman::p_load(shiny, magrittr, readxl, tidyverse, ggpmisc, patchwork)
getwd()
getwd()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
if(!require("pacman", quietly = T)) install.packages("pacman")
pacman::p_load(shiny, magrittr, readxl, tidyverse, ggpmisc, patchwork)
#setwd("~/Desktop/Unit 12")
ui <- (
navbarPage(
"Saqib Beers!",
tabPanel(
"Visualization",
sidebarLayout(
sidebarPanel(
radioButtons(
inputId = "type",
label = "Plot type",
choices = c("Histogram" = "h", "BoxPlot" = "b", "Scatter Plot" = "s",
"Linear Regression Line" = "r", "Median BarPlot" = "m"),
selected = "h"
),
selectizeInput(
inputId = "state",
label = "Choose States",
choices = read_excel("Beers.xlsx", sheet = 2)$State %>% unique() %>% sort(decreasing = F),
selected = "TX",
multiple = TRUE
)
),
mainPanel(plotOutput("plot"))
)
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
Beers = read_excel("Beers.xlsx", sheet = 2)
Breweries = read_excel("Beers.xlsx", sheet = 1)
full =
left_join(Breweries, Beers, by = c("Brewery_id" = "Brew_ID")) %>%
rename(Beers = Name.x, Breweries = Name.y) %>%
select(State, ABV, IBU)
if (input$type == "h") {
full %>%
filter(State %in% input$state) %>%
pivot_longer(names_to = "key", values_to = "value", -State) %>%
ggplot(aes(value, ..density..)) +
geom_histogram(
fill = "white",
color = "darkred",
bins = 13,
na.rm = T
) +
geom_density(
color = "navy",
size = 0.5,
kernel = "epanechnikov",
na.rm = T
) +
facet_wrap(
~ key,
nrow = 1,
scales = "free",
labeller = labeller(
key = c("ABV" = "Alcoholic Content", "IBU" = "Beer Bitterness")
)
) +
theme_minimal() +
labs(x = "Value", y = "Density")
} else {
if (input$type == "b") {
full %>%
filter(State %in% input$state) %>%
pivot_longer(names_to = "key", values_to = "value", -State) %>%
ggplot(aes(y = value, x = key)) +
geom_boxplot(
fill = "white",
color = "navy",
outlier.colour = "darkred",
na.rm = T
) +
facet_wrap(
~ key,
nrow = 1,
scales = "free",
labeller = labeller(
key = c("ABV" = "Alcoholic Content", "IBU" = "Beer Bitterness")
)
) +
theme_minimal() +
labs(x = "", y = "Value") +
theme(axis.text.x = element_blank())
} else {
if (input$type %in% c("s", "r")) {
p =
full %>%
filter(State %in% input$state) %>%
ggplot(aes(x = ABV, y = IBU)) +
geom_point(color = "navy",
alpha = 0.3,
na.rm = T) +
theme_minimal() +
labs(x = "Alcoholic Content", y = "Beer Bitterness")
if (input$type == "s") {
p
} else {
p + geom_smooth(
formula = y ~ x,
method = "lm",
color = "darkred",
na.rm = T
) +
stat_poly_eq(
aes(label = paste(
..eq.label.., ..rr.label.., sep = "~~~"
)),
formula = y ~ x,
parse = T,
na.rm = T
)
}
} else {
full %>%
filter(State %in% input$state) %>%
group_by(State) %>%
summarise(
nABV = sum(!is.na(ABV)),
medABV = median(ABV, na.rm = T),
nIBU = sum(!is.na(IBU)),
medIBU = median(IBU, na.rm = T)
) %>%
ungroup() -> tempo
pABV =
tempo %>%
ggplot() +
geom_bar(
aes(reorder(State, -medABV), medABV, fill = State),
stat = "identity",
position = position_dodge2(0.9)
) +
geom_label(aes(State, medABV, label = nABV), position = position_dodge2(0.9)) +
scale_fill_viridis_d() +
labs(x = "",
y = "Alcoholic Content",
title = "Median Alcoholic Content with # Obs") +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 9))
pIBU =
tempo %>%
ggplot() +
geom_bar(
aes(reorder(State, -medIBU), medIBU, fill = State),
stat = "identity",
position = position_dodge2(0.9)
) +
geom_label(aes(State, medIBU, label = nIBU), position = position_dodge2(0.9)) +
scale_fill_viridis_d() +
labs(x = "State",
y = "Beer Bitterness",
title = "Median Beer Bitterness with # Obs") +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_text(size = 9))
patchwork::wrap_plots(pABV, pIBU, ncol = 1, nrow = 2)
}
}
}
})
}
shinyApp(ui, server)
# Chunk 3: cars
summary(cars)
# Chunk 4: pressure
plot(pressure)
View(baseball.sd)
setwd("~/Desktop/Unit 12/websiteDDS")
getwd()
setwd("~/Desktop/Unit 12")
getwd()
setwd("~/Desktop/Unit 12/websiteDDS")
getwd()
